package chessongo

//Directions of movement
const (
	DIRECTION_N = iota
	DIRECTION_S
	DIRECTION_E
	DIRECTION_W
	DIRECTION_NE
	DIRECTION_NW
	DIRECTION_SE
	DIRECTION_SW
)

//Significant bit type
const (
	LSB = iota
	MSB
)

type Direction uint

var ALL_DIRECTIONS = [8]Direction{
	DIRECTION_N,
	DIRECTION_S,
	DIRECTION_E,
	DIRECTION_W,
	DIRECTION_NE,
	DIRECTION_NW,
	DIRECTION_SE,
	DIRECTION_SW,
}

var ROOK_DIRECTIONS = [4]Direction{
	DIRECTION_N,
	DIRECTION_S,
	DIRECTION_E,
	DIRECTION_W,
}

var BISHOP_DIRECTIONS = [4]Direction{
	DIRECTION_NE,
	DIRECTION_NW,
	DIRECTION_SE,
	DIRECTION_SW,
}

//(X,Y)-based Shift of every direction
var DIRECTION_SHIFT = [8][2]int{}

//Tells which bit is the blocking bit in every direction
var DIRECTION_LSB_MSP = [8]uint{}

var KING_RANK_FILE_SHIFTS = [8][2]int{
	{-1, -1}, {0, -1}, {1, -1}, {-1, 0},
	{1, 0}, {-1, 1}, {0, 1}, {1, 1},
}

var KNIGHT_RANK_FILE_SHIFTS = [8][2]int{
	{-2, -1}, {-2, 1}, {2, -1}, {2, 1},
	{-1, -2}, {-1, 2}, {1, -2}, {1, 2},
}

func init() {

	DIRECTION_LSB_MSP[DIRECTION_E] = MSB
	DIRECTION_LSB_MSP[DIRECTION_W] = LSB
	DIRECTION_LSB_MSP[DIRECTION_N] = LSB
	DIRECTION_LSB_MSP[DIRECTION_S] = MSB
	DIRECTION_LSB_MSP[DIRECTION_NE] = LSB
	DIRECTION_LSB_MSP[DIRECTION_NW] = LSB
	DIRECTION_LSB_MSP[DIRECTION_SE] = MSB
	DIRECTION_LSB_MSP[DIRECTION_SW] = MSB

	DIRECTION_SHIFT[DIRECTION_N] = [2]int{1 /*Rank*/, 0 /*File*/}
	DIRECTION_SHIFT[DIRECTION_S] = [2]int{-1, 0}
	DIRECTION_SHIFT[DIRECTION_E] = [2]int{0, -1}
	DIRECTION_SHIFT[DIRECTION_W] = [2]int{0, 1}
	DIRECTION_SHIFT[DIRECTION_NE] = [2]int{1, -1}
	DIRECTION_SHIFT[DIRECTION_NW] = [2]int{1, 1}
	DIRECTION_SHIFT[DIRECTION_SE] = [2]int{-1, -1}
	DIRECTION_SHIFT[DIRECTION_SW] = [2]int{-1, 1}
}
